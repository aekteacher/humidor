#include <Wire.h>
#include <LCD03.h>

// Create new LCD03 instance
LCD03 lcd;


#define BUTTON_PIN_UP 2
int buttonStateUp = 0;
#define BUTTON_PIN_DOWN 3
int buttonStateDown = 0;
#define BUTTON_PIN_LEFT 5
int buttonStateLeft = 0;
#define BUTTON_PIN_RIGHT 4
int buttonStateRight = 0;

int menuPos = 0;
int menuY = 0;
int menuX = 0;

#define MENU_UPDATE_INTERVAL 2000  // How long (in milliseconds) should lcd light stay on?

unsigned int currentMenuTimer = 0;
unsigned long startMenuTimer;    // For calculating the lcd light on time.
boolean menuChange = true;


// Values in Settings
int settingsBrightness = 75;
int updateShort = 1;
int updateLong = 1;
int warningOne = 1;
int warningShort = 1;
int warningLong = 1;

void setup() {

  lcd.begin(20, 4);

  // Clear the LCD
  lcd.backlight();
  lcd.clear();
  lcd.print("Welcome To Humidor");

  pinMode(BUTTON_PIN_UP, INPUT);
  pinMode(BUTTON_PIN_DOWN, INPUT);
  pinMode(BUTTON_PIN_LEFT, INPUT);
  pinMode(BUTTON_PIN_RIGHT, INPUT);

  delay(2000);
}

void loop() {

  delay(150);
  buttonStateUp = digitalRead(BUTTON_PIN_UP);
  buttonStateDown = digitalRead(BUTTON_PIN_DOWN);
  buttonStateLeft = digitalRead(BUTTON_PIN_LEFT);
  buttonStateRight = digitalRead(BUTTON_PIN_RIGHT);

  if (!menuChange) {
    if (buttonStateUp == HIGH) {  // Button pressed.
      startMenuTimer = millis();
      currentMenuTimer = 0;
      menuChange = true;
      menuY++;
    }
    if (buttonStateDown == HIGH) {  // Button pressed.
      startMenuTimer = millis();
      currentMenuTimer = 0;
      menuChange = true;
      menuY--;
    }
    if (buttonStateLeft == HIGH) {  // Button pressed.
      startMenuTimer = millis();
      currentMenuTimer = 0;
      menuChange = true;
      menuX--;
    }
    if (buttonStateRight == HIGH) {  // Button pressed.
      startMenuTimer = millis();
      currentMenuTimer = 0;
      menuChange = true;
      menuX++;
    }
  }
  else {
    if (menuChange) {
      currentMenuTimer = millis() - startMenuTimer;
      if (currentMenuTimer > MENU_UPDATE_INTERVAL) {
        menuChange = false;
      }
    }
  }
  switch (menuPos) {
    case 1:
      menuTemp();
      break;
    case 2:
      menuSettings();
      break;
    case 3:
      menuSettingsBrightness();
      break;
    case 4:
      menuSettingsUpdate();
      break;
    case 5:
      menuSettingsUpdateShort();
      break;
    case 6:
      menuSettingsUpdateLong();
      break;
    case 7:
      menuSettingsWarning();
      break;
    case 8:
      menuSettingsWarningOne();
      break;
    case 9:
      menuSettingsWarningShort();
      break;
    case 10:
      menuSettingsWarningLong();
      break;
    default:
      lcd.home();
      lcd.print("Menu - Root");
      lcd.setCursor(0, 1);
      lcd.print("1:Temp. and Humidity");
      lcd.setCursor(0, 2);
      lcd.print("2:Settings");
      lcd.blink();
      menuList(menuY, "hejsan", "rad2?" + settingsBrightness, "", "");
  }
  lcd.setCursor(0, menuX);
}

void menuList(int P, String L1, String L2, String L3, String L4) {
  if (menuY >= P) menuY = P;
  lcd.home();
  lcd.print(L1);
  lcd.setCursor(0, 1);
  lcd.print(L2);
  lcd.setCursor(0, 2);
  lcd.print(L3);
  lcd.setCursor(0, 3);
  lcd.print(L4);
  lcd.blink();
}

void menuValue() {

}

void menuStart() {

}

void menuTemp() {
  lcd.home();
  lcd.print("Temp and 1");
  lcd.setCursor(0, 1);
  lcd.print("Temperature: "); lcd.print("22");
  lcd.setCursor(0, 2);
  lcd.print("Humidity: "); lcd.print("76%");
  lcd.setCursor(0, 3);
  lcd.print("Heatindex: "); lcd.print("24");
  lcd.noBlink();
}

void menuSettings() {
  lcd.home();
  lcd.print("<- Settings");
  lcd.setCursor(0, 1);
  lcd.print("1:Brightness");
  lcd.setCursor(0, 2);
  lcd.print("2:Updates");
  lcd.setCursor(0, 3);
  lcd.print("3.Warning");
  lcd.blink();
}

void menuSettingsBrightness() {
  lcd.home();
  lcd.print("<-- Brightness");
  lcd.setCursor(0, 1);
  lcd.print("u");
  lcd.setCursor(0, 2);
  lcd.print(settingsBrightness); lcd.print(" %" );
  lcd.setCursor(0, 3);
  lcd.print("d");
  lcd.noBlink();
  settingsBrightness = settingsBrightness - menuY;
  menuY = 0;
  if (settingsBrightness <= 0) {
    settingsBrightness = 1;
  }
  if (settingsBrightness >= 100) {
    settingsBrightness = 99;
  }
}

void menuSettingsUpdate() {
  lcd.home();
  lcd.print("<-- Updates");
  lcd.setCursor(0, 1);
  lcd.print("1: Short time update");
  lcd.setCursor(0, 2);
  lcd.print("2: Long time update");
  lcd.blink();
}

void menuSettingsUpdateShort() {
  lcd.home();
  lcd.print("<-- Updates");
  lcd.setCursor(0, 1);
  lcd.print("u");
  lcd.setCursor(0, 2);
  lcd.print(updateShort);
  lcd.setCursor(0, 3);
  lcd.print("d");
  lcd.noBlink();
  updateShort = updateShort - menuY;
  menuY = 0;
}

void menuSettingsUpdateLong() {
  lcd.home();
  lcd.print("<-- Updates");
  lcd.setCursor(0, 1);
  lcd.print("u");
  lcd.setCursor(0, 2);
  lcd.print(updateLong);
  lcd.setCursor(0, 3);
  lcd.print("d");
  //  lcd.noBlink;
  updateLong = updateLong + menuY;
  menuY = 0;
}

void menuSettingsWarning() {
  lcd.home();
  lcd.print("<--- Warning");
  lcd.setCursor(0, 1);
  lcd.print("1: One measurement");
  lcd.setCursor(0, 2);
  lcd.print("2: Short time");
  lcd.setCursor(0, 3);
  lcd.print("3: Long time");
  lcd.blink();
}

void menuSettingsWarningOne() {
  lcd.home();
  lcd.print("<--- Warning");
  lcd.setCursor(0, 1);
  lcd.print("u");
  lcd.setCursor(0, 2);
  lcd.print(warningOne);
  lcd.setCursor(0, 3);
  lcd.print("d");
  lcd.noBlink();
  warningOne = warningOne + menuY;
  menuY = 0;
}

void menuSettingsWarningShort() {
  lcd.home();
  lcd.print("<--- Warning");
  lcd.setCursor(0, 1);
  lcd.print("u");
  lcd.setCursor(0, 2);
  lcd.print(warningShort);
  lcd.setCursor(0, 3);
  lcd.print("d");
  lcd.noBlink();
  warningShort = warningShort + menuY;
  menuY = 0;
}

void menuSettingsWarningLong() {
  lcd.home();
  lcd.print("<--- Warning");
  lcd.setCursor(0, 1);
  lcd.print("u");
  lcd.setCursor(0, 2);
  lcd.print(warningLong);
  lcd.setCursor(0, 3);
  lcd.print("d");
  lcd.noBlink();
  warningLong = warningLong + menuY;
  menuY = 0;
}
